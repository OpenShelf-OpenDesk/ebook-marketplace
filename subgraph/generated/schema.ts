// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BookAuthor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("authorAddress", Value.fromString(""));
    this.set("share", Value.fromBigInt(BigInt.zero()));
    this.set("authorRights", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BookAuthor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BookAuthor entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BookAuthor", id.toString(), this);
    }
  }

  static load(id: string): BookAuthor | null {
    return changetype<BookAuthor | null>(store.get("BookAuthor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get authorAddress(): string {
    let value = this.get("authorAddress");
    return value!.toString();
  }

  set authorAddress(value: string) {
    this.set("authorAddress", Value.fromString(value));
  }

  get share(): BigInt {
    let value = this.get("share");
    return value!.toBigInt();
  }

  set share(value: BigInt) {
    this.set("share", Value.fromBigInt(value));
  }

  get authorRights(): boolean {
    let value = this.get("authorRights");
    return value!.toBoolean();
  }

  set authorRights(value: boolean) {
    this.set("authorRights", Value.fromBoolean(value));
  }
}

export class Book extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("bookID", Value.fromBigInt(BigInt.zero()));
    this.set("authors", Value.fromStringArray(new Array(0)));
    this.set("minter", Value.fromString(""));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("maxPrice", Value.fromBigInt(BigInt.zero()));
    this.set("supplyLimited", Value.fromBoolean(false));
    this.set("pricedBookSupplyLimit", Value.fromBigInt(BigInt.zero()));
    this.set("freeBooksPrinted", Value.fromBigInt(BigInt.zero()));
    this.set("pricedBooksPrinted", Value.fromBigInt(BigInt.zero()));
    this.set("totalRevenue", Value.fromBigInt(BigInt.zero()));
    this.set("withdrawableRevenue", Value.fromBigInt(BigInt.zero()));
    this.set("metadataURI", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Book entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Book entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Book", id.toString(), this);
    }
  }

  static load(id: string): Book | null {
    return changetype<Book | null>(store.get("Book", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bookID(): BigInt {
    let value = this.get("bookID");
    return value!.toBigInt();
  }

  set bookID(value: BigInt) {
    this.set("bookID", Value.fromBigInt(value));
  }

  get authors(): Array<string> {
    let value = this.get("authors");
    return value!.toStringArray();
  }

  set authors(value: Array<string>) {
    this.set("authors", Value.fromStringArray(value));
  }

  get minter(): string {
    let value = this.get("minter");
    return value!.toString();
  }

  set minter(value: string) {
    this.set("minter", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get maxPrice(): BigInt {
    let value = this.get("maxPrice");
    return value!.toBigInt();
  }

  set maxPrice(value: BigInt) {
    this.set("maxPrice", Value.fromBigInt(value));
  }

  get supplyLimited(): boolean {
    let value = this.get("supplyLimited");
    return value!.toBoolean();
  }

  set supplyLimited(value: boolean) {
    this.set("supplyLimited", Value.fromBoolean(value));
  }

  get pricedBookSupplyLimit(): BigInt {
    let value = this.get("pricedBookSupplyLimit");
    return value!.toBigInt();
  }

  set pricedBookSupplyLimit(value: BigInt) {
    this.set("pricedBookSupplyLimit", Value.fromBigInt(value));
  }

  get freeBooksPrinted(): BigInt {
    let value = this.get("freeBooksPrinted");
    return value!.toBigInt();
  }

  set freeBooksPrinted(value: BigInt) {
    this.set("freeBooksPrinted", Value.fromBigInt(value));
  }

  get pricedBooksPrinted(): BigInt {
    let value = this.get("pricedBooksPrinted");
    return value!.toBigInt();
  }

  set pricedBooksPrinted(value: BigInt) {
    this.set("pricedBooksPrinted", Value.fromBigInt(value));
  }

  get totalRevenue(): BigInt {
    let value = this.get("totalRevenue");
    return value!.toBigInt();
  }

  set totalRevenue(value: BigInt) {
    this.set("totalRevenue", Value.fromBigInt(value));
  }

  get withdrawableRevenue(): BigInt {
    let value = this.get("withdrawableRevenue");
    return value!.toBigInt();
  }

  set withdrawableRevenue(value: BigInt) {
    this.set("withdrawableRevenue", Value.fromBigInt(value));
  }

  get metadataURI(): string {
    let value = this.get("metadataURI");
    return value!.toString();
  }

  set metadataURI(value: string) {
    this.set("metadataURI", Value.fromString(value));
  }
}

export class Copy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("UID", Value.fromBigInt(BigInt.zero()));
    this.set("book", Value.fromString(""));
    this.set("readerAddress", Value.fromString(""));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Copy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Copy entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Copy", id.toString(), this);
    }
  }

  static load(id: string): Copy | null {
    return changetype<Copy | null>(store.get("Copy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get UID(): BigInt {
    let value = this.get("UID");
    return value!.toBigInt();
  }

  set UID(value: BigInt) {
    this.set("UID", Value.fromBigInt(value));
  }

  get book(): string {
    let value = this.get("book");
    return value!.toString();
  }

  set book(value: string) {
    this.set("book", Value.fromString(value));
  }

  get readerAddress(): string {
    let value = this.get("readerAddress");
    return value!.toString();
  }

  set readerAddress(value: string) {
    this.set("readerAddress", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}
